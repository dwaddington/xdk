// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container.proto

#ifndef PROTOBUF_container_2eproto__INCLUDED
#define PROTOBUF_container_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "msgtypes.pb.h"
// @@protoc_insertion_point(includes)

namespace ContainerProtocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_container_2eproto();
void protobuf_AssignDesc_container_2eproto();
void protobuf_ShutdownFile_container_2eproto();

class Request;
class Reply;

enum Request_Operation {
  Request_Operation_ADD_COMPONENT = 1,
  Request_Operation_REMOVE_COMPONENT = 2,
  Request_Operation_INVOKE_COMPONENT = 3,
  Request_Operation_PAIRWISE_BIND = 4,
  Request_Operation_CONFIGURE_PIPELINE = 5,
  Request_Operation_TEARDOWN_PIPELINE = 6,
  Request_Operation_START_PIPELINE = 7,
  Request_Operation_STOP_PIPELINE = 8,
  Request_Operation_RESET_PIPELINE = 9
};
bool Request_Operation_IsValid(int value);
const Request_Operation Request_Operation_Operation_MIN = Request_Operation_ADD_COMPONENT;
const Request_Operation Request_Operation_Operation_MAX = Request_Operation_RESET_PIPELINE;
const int Request_Operation_Operation_ARRAYSIZE = Request_Operation_Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Operation_descriptor();
inline const ::std::string& Request_Operation_Name(Request_Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Operation_descriptor(), value);
}
inline bool Request_Operation_Parse(
    const ::std::string& name, Request_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Operation>(
    Request_Operation_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Operation Operation;
  static const Operation ADD_COMPONENT = Request_Operation_ADD_COMPONENT;
  static const Operation REMOVE_COMPONENT = Request_Operation_REMOVE_COMPONENT;
  static const Operation INVOKE_COMPONENT = Request_Operation_INVOKE_COMPONENT;
  static const Operation PAIRWISE_BIND = Request_Operation_PAIRWISE_BIND;
  static const Operation CONFIGURE_PIPELINE = Request_Operation_CONFIGURE_PIPELINE;
  static const Operation TEARDOWN_PIPELINE = Request_Operation_TEARDOWN_PIPELINE;
  static const Operation START_PIPELINE = Request_Operation_START_PIPELINE;
  static const Operation STOP_PIPELINE = Request_Operation_STOP_PIPELINE;
  static const Operation RESET_PIPELINE = Request_Operation_RESET_PIPELINE;
  static inline bool Operation_IsValid(int value) {
    return Request_Operation_IsValid(value);
  }
  static const Operation Operation_MIN =
    Request_Operation_Operation_MIN;
  static const Operation Operation_MAX =
    Request_Operation_Operation_MAX;
  static const int Operation_ARRAYSIZE =
    Request_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operation_descriptor() {
    return Request_Operation_descriptor();
  }
  static inline const ::std::string& Operation_Name(Operation value) {
    return Request_Operation_Name(value);
  }
  static inline bool Operation_Parse(const ::std::string& name,
      Operation* value) {
    return Request_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .MessageType type = 1 [default = CONTAINER_REQ];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MessageType type() const;
  inline void set_type(::MessageType value);

  // required .ContainerProtocol.Request.Operation op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::ContainerProtocol::Request_Operation op() const;
  inline void set_op(::ContainerProtocol::Request_Operation value);

  // optional string instance_id = 3;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 3;
  inline const ::std::string& instance_id() const;
  inline void set_instance_id(const ::std::string& value);
  inline void set_instance_id(const char* value);
  inline void set_instance_id(const char* value, size_t size);
  inline ::std::string* mutable_instance_id();
  inline ::std::string* release_instance_id();
  inline void set_allocated_instance_id(::std::string* instance_id);

  // optional string component_id = 4;
  inline bool has_component_id() const;
  inline void clear_component_id();
  static const int kComponentIdFieldNumber = 4;
  inline const ::std::string& component_id() const;
  inline void set_component_id(const ::std::string& value);
  inline void set_component_id(const char* value);
  inline void set_component_id(const char* value, size_t size);
  inline ::std::string* mutable_component_id();
  inline ::std::string* release_component_id();
  inline void set_allocated_component_id(::std::string* component_id);

  // optional string path = 5;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 5;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string xml = 6;
  inline bool has_xml() const;
  inline void clear_xml();
  static const int kXmlFieldNumber = 6;
  inline const ::std::string& xml() const;
  inline void set_xml(const ::std::string& value);
  inline void set_xml(const char* value);
  inline void set_xml(const char* value, size_t size);
  inline ::std::string* mutable_xml();
  inline ::std::string* release_xml();
  inline void set_allocated_xml(::std::string* xml);

  // optional string operation = 7;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 7;
  inline const ::std::string& operation() const;
  inline void set_operation(const ::std::string& value);
  inline void set_operation(const char* value);
  inline void set_operation(const char* value, size_t size);
  inline ::std::string* mutable_operation();
  inline ::std::string* release_operation();
  inline void set_allocated_operation(::std::string* operation);

  // @@protoc_insertion_point(class_scope:ContainerProtocol.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_component_id();
  inline void clear_has_component_id();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_xml();
  inline void clear_has_xml();
  inline void set_has_operation();
  inline void clear_has_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int op_;
  ::std::string* instance_id_;
  ::std::string* component_id_;
  ::std::string* path_;
  ::std::string* xml_;
  ::std::string* operation_;
  friend void  protobuf_AddDesc_container_2eproto();
  friend void protobuf_AssignDesc_container_2eproto();
  friend void protobuf_ShutdownFile_container_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MessageType type = 1 [default = CONTAINER_REPLY];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MessageType type() const;
  inline void set_type(::MessageType value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 remaining = 3;
  inline bool has_remaining() const;
  inline void clear_remaining();
  static const int kRemainingFieldNumber = 3;
  inline ::google::protobuf::int32 remaining() const;
  inline void set_remaining(::google::protobuf::int32 value);

  // optional string operation_result = 4;
  inline bool has_operation_result() const;
  inline void clear_operation_result();
  static const int kOperationResultFieldNumber = 4;
  inline const ::std::string& operation_result() const;
  inline void set_operation_result(const ::std::string& value);
  inline void set_operation_result(const char* value);
  inline void set_operation_result(const char* value, size_t size);
  inline ::std::string* mutable_operation_result();
  inline ::std::string* release_operation_result();
  inline void set_allocated_operation_result(::std::string* operation_result);

  // @@protoc_insertion_point(class_scope:ContainerProtocol.Reply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_remaining();
  inline void clear_has_remaining();
  inline void set_has_operation_result();
  inline void clear_has_operation_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 status_;
  ::std::string* operation_result_;
  ::google::protobuf::int32 remaining_;
  friend void  protobuf_AddDesc_container_2eproto();
  friend void protobuf_AssignDesc_container_2eproto();
  friend void protobuf_ShutdownFile_container_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .MessageType type = 1 [default = CONTAINER_REQ];
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::MessageType Request::type() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Request.type)
  return static_cast< ::MessageType >(type_);
}
inline void Request::set_type(::MessageType value) {
  assert(::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ContainerProtocol.Request.type)
}

// required .ContainerProtocol.Request.Operation op = 2;
inline bool Request::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::ContainerProtocol::Request_Operation Request::op() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Request.op)
  return static_cast< ::ContainerProtocol::Request_Operation >(op_);
}
inline void Request::set_op(::ContainerProtocol::Request_Operation value) {
  assert(::ContainerProtocol::Request_Operation_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:ContainerProtocol.Request.op)
}

// optional string instance_id = 3;
inline bool Request::has_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_instance_id() {
  if (instance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instance_id_->clear();
  }
  clear_has_instance_id();
}
inline const ::std::string& Request::instance_id() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Request.instance_id)
  return *instance_id_;
}
inline void Request::set_instance_id(const ::std::string& value) {
  set_has_instance_id();
  if (instance_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instance_id_ = new ::std::string;
  }
  instance_id_->assign(value);
  // @@protoc_insertion_point(field_set:ContainerProtocol.Request.instance_id)
}
inline void Request::set_instance_id(const char* value) {
  set_has_instance_id();
  if (instance_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instance_id_ = new ::std::string;
  }
  instance_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContainerProtocol.Request.instance_id)
}
inline void Request::set_instance_id(const char* value, size_t size) {
  set_has_instance_id();
  if (instance_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instance_id_ = new ::std::string;
  }
  instance_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContainerProtocol.Request.instance_id)
}
inline ::std::string* Request::mutable_instance_id() {
  set_has_instance_id();
  if (instance_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instance_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContainerProtocol.Request.instance_id)
  return instance_id_;
}
inline ::std::string* Request::release_instance_id() {
  clear_has_instance_id();
  if (instance_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instance_id_;
    instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instance_id_;
  }
  if (instance_id) {
    set_has_instance_id();
    instance_id_ = instance_id;
  } else {
    clear_has_instance_id();
    instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContainerProtocol.Request.instance_id)
}

// optional string component_id = 4;
inline bool Request::has_component_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_component_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_component_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_component_id() {
  if (component_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    component_id_->clear();
  }
  clear_has_component_id();
}
inline const ::std::string& Request::component_id() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Request.component_id)
  return *component_id_;
}
inline void Request::set_component_id(const ::std::string& value) {
  set_has_component_id();
  if (component_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    component_id_ = new ::std::string;
  }
  component_id_->assign(value);
  // @@protoc_insertion_point(field_set:ContainerProtocol.Request.component_id)
}
inline void Request::set_component_id(const char* value) {
  set_has_component_id();
  if (component_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    component_id_ = new ::std::string;
  }
  component_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContainerProtocol.Request.component_id)
}
inline void Request::set_component_id(const char* value, size_t size) {
  set_has_component_id();
  if (component_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    component_id_ = new ::std::string;
  }
  component_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContainerProtocol.Request.component_id)
}
inline ::std::string* Request::mutable_component_id() {
  set_has_component_id();
  if (component_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    component_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContainerProtocol.Request.component_id)
  return component_id_;
}
inline ::std::string* Request::release_component_id() {
  clear_has_component_id();
  if (component_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = component_id_;
    component_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_component_id(::std::string* component_id) {
  if (component_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete component_id_;
  }
  if (component_id) {
    set_has_component_id();
    component_id_ = component_id;
  } else {
    clear_has_component_id();
    component_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContainerProtocol.Request.component_id)
}

// optional string path = 5;
inline bool Request::has_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Request::path() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Request.path)
  return *path_;
}
inline void Request::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:ContainerProtocol.Request.path)
}
inline void Request::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContainerProtocol.Request.path)
}
inline void Request::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContainerProtocol.Request.path)
}
inline ::std::string* Request::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContainerProtocol.Request.path)
  return path_;
}
inline ::std::string* Request::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContainerProtocol.Request.path)
}

// optional string xml = 6;
inline bool Request::has_xml() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_xml() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_xml() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_xml() {
  if (xml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_->clear();
  }
  clear_has_xml();
}
inline const ::std::string& Request::xml() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Request.xml)
  return *xml_;
}
inline void Request::set_xml(const ::std::string& value) {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_ = new ::std::string;
  }
  xml_->assign(value);
  // @@protoc_insertion_point(field_set:ContainerProtocol.Request.xml)
}
inline void Request::set_xml(const char* value) {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_ = new ::std::string;
  }
  xml_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContainerProtocol.Request.xml)
}
inline void Request::set_xml(const char* value, size_t size) {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_ = new ::std::string;
  }
  xml_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContainerProtocol.Request.xml)
}
inline ::std::string* Request::mutable_xml() {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContainerProtocol.Request.xml)
  return xml_;
}
inline ::std::string* Request::release_xml() {
  clear_has_xml();
  if (xml_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xml_;
    xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_xml(::std::string* xml) {
  if (xml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xml_;
  }
  if (xml) {
    set_has_xml();
    xml_ = xml;
  } else {
    clear_has_xml();
    xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContainerProtocol.Request.xml)
}

// optional string operation = 7;
inline bool Request::has_operation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_operation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_operation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_operation() {
  if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_->clear();
  }
  clear_has_operation();
}
inline const ::std::string& Request::operation() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Request.operation)
  return *operation_;
}
inline void Request::set_operation(const ::std::string& value) {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  operation_->assign(value);
  // @@protoc_insertion_point(field_set:ContainerProtocol.Request.operation)
}
inline void Request::set_operation(const char* value) {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  operation_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContainerProtocol.Request.operation)
}
inline void Request::set_operation(const char* value, size_t size) {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  operation_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContainerProtocol.Request.operation)
}
inline ::std::string* Request::mutable_operation() {
  set_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContainerProtocol.Request.operation)
  return operation_;
}
inline ::std::string* Request::release_operation() {
  clear_has_operation();
  if (operation_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operation_;
    operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_operation(::std::string* operation) {
  if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_;
  }
  if (operation) {
    set_has_operation();
    operation_ = operation;
  } else {
    clear_has_operation();
    operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContainerProtocol.Request.operation)
}

// -------------------------------------------------------------------

// Reply

// required .MessageType type = 1 [default = CONTAINER_REPLY];
inline bool Reply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::MessageType Reply::type() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Reply.type)
  return static_cast< ::MessageType >(type_);
}
inline void Reply::set_type(::MessageType value) {
  assert(::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ContainerProtocol.Reply.type)
}

// optional int32 status = 2;
inline bool Reply::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Reply::status() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Reply.status)
  return status_;
}
inline void Reply::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ContainerProtocol.Reply.status)
}

// optional int32 remaining = 3;
inline bool Reply::has_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reply::set_has_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reply::clear_has_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reply::clear_remaining() {
  remaining_ = 0;
  clear_has_remaining();
}
inline ::google::protobuf::int32 Reply::remaining() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Reply.remaining)
  return remaining_;
}
inline void Reply::set_remaining(::google::protobuf::int32 value) {
  set_has_remaining();
  remaining_ = value;
  // @@protoc_insertion_point(field_set:ContainerProtocol.Reply.remaining)
}

// optional string operation_result = 4;
inline bool Reply::has_operation_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Reply::set_has_operation_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Reply::clear_has_operation_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Reply::clear_operation_result() {
  if (operation_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_result_->clear();
  }
  clear_has_operation_result();
}
inline const ::std::string& Reply::operation_result() const {
  // @@protoc_insertion_point(field_get:ContainerProtocol.Reply.operation_result)
  return *operation_result_;
}
inline void Reply::set_operation_result(const ::std::string& value) {
  set_has_operation_result();
  if (operation_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_result_ = new ::std::string;
  }
  operation_result_->assign(value);
  // @@protoc_insertion_point(field_set:ContainerProtocol.Reply.operation_result)
}
inline void Reply::set_operation_result(const char* value) {
  set_has_operation_result();
  if (operation_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_result_ = new ::std::string;
  }
  operation_result_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContainerProtocol.Reply.operation_result)
}
inline void Reply::set_operation_result(const char* value, size_t size) {
  set_has_operation_result();
  if (operation_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_result_ = new ::std::string;
  }
  operation_result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContainerProtocol.Reply.operation_result)
}
inline ::std::string* Reply::mutable_operation_result() {
  set_has_operation_result();
  if (operation_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operation_result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContainerProtocol.Reply.operation_result)
  return operation_result_;
}
inline ::std::string* Reply::release_operation_result() {
  clear_has_operation_result();
  if (operation_result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operation_result_;
    operation_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Reply::set_allocated_operation_result(::std::string* operation_result) {
  if (operation_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_result_;
  }
  if (operation_result) {
    set_has_operation_result();
    operation_result_ = operation_result;
  } else {
    clear_has_operation_result();
    operation_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContainerProtocol.Reply.operation_result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ContainerProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ContainerProtocol::Request_Operation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ContainerProtocol::Request_Operation>() {
  return ::ContainerProtocol::Request_Operation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_container_2eproto__INCLUDED
