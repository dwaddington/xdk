// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "container.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ContainerProtocol {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_container_2eproto() {
  protobuf_AddDesc_container_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "container.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, component_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, operation_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_Operation_descriptor_ = Request_descriptor_->enum_type(0);
  Reply_descriptor_ = file->message_type(1);
  static const int Reply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, operation_result_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_container_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_container_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
}

void protobuf_AddDesc_container_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_msgtypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017container.proto\022\021ContainerProtocol\032\016ms"
    "gtypes.proto\"\211\003\n\007Request\022)\n\004type\030\001 \002(\0162\014"
    ".MessageType:\rCONTAINER_REQ\0220\n\002op\030\002 \002(\0162"
    "$.ContainerProtocol.Request.Operation\022\023\n"
    "\013instance_id\030\003 \001(\t\022\024\n\014component_id\030\004 \001(\t"
    "\022\014\n\004path\030\005 \001(\t\022\013\n\003xml\030\006 \001(\t\022\021\n\toperation"
    "\030\007 \001(\t\"\307\001\n\tOperation\022\021\n\rADD_COMPONENT\020\001\022"
    "\024\n\020REMOVE_COMPONENT\020\002\022\024\n\020INVOKE_COMPONEN"
    "T\020\003\022\021\n\rPAIRWISE_BIND\020\004\022\026\n\022CONFIGURE_PIPE"
    "LINE\020\005\022\025\n\021TEARDOWN_PIPELINE\020\006\022\022\n\016START_P"
    "IPELINE\020\007\022\021\n\rSTOP_PIPELINE\020\010\022\022\n\016RESET_PI"
    "PELINE\020\t\"q\n\005Reply\022+\n\004type\030\001 \002(\0162\014.Messag"
    "eType:\017CONTAINER_REPLY\022\016\n\006status\030\002 \001(\005\022\021"
    "\n\tremaining\030\003 \001(\005\022\030\n\020operation_result\030\004 "
    "\001(\tB\002H\001", 567);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "container.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Reply::default_instance_ = new Reply();
  Request::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_container_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_container_2eproto {
  StaticDescriptorInitializer_container_2eproto() {
    protobuf_AddDesc_container_2eproto();
  }
} static_descriptor_initializer_container_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Operation_descriptor_;
}
bool Request_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_Operation Request::ADD_COMPONENT;
const Request_Operation Request::REMOVE_COMPONENT;
const Request_Operation Request::INVOKE_COMPONENT;
const Request_Operation Request::PAIRWISE_BIND;
const Request_Operation Request::CONFIGURE_PIPELINE;
const Request_Operation Request::TEARDOWN_PIPELINE;
const Request_Operation Request::START_PIPELINE;
const Request_Operation Request::STOP_PIPELINE;
const Request_Operation Request::RESET_PIPELINE;
const Request_Operation Request::Operation_MIN;
const Request_Operation Request::Operation_MAX;
const int Request::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kOpFieldNumber;
const int Request::kInstanceIdFieldNumber;
const int Request::kComponentIdFieldNumber;
const int Request::kPathFieldNumber;
const int Request::kXmlFieldNumber;
const int Request::kOperationFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContainerProtocol.Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContainerProtocol.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 3;
  op_ = 1;
  instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  component_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ContainerProtocol.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (instance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instance_id_;
  }
  if (component_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete component_id_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (xml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xml_;
  }
  if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_container_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    type_ = 3;
    op_ = 1;
    if (has_instance_id()) {
      if (instance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instance_id_->clear();
      }
    }
    if (has_component_id()) {
      if (component_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        component_id_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_xml()) {
      if (xml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xml_->clear();
      }
    }
    if (has_operation()) {
      if (operation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContainerProtocol.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageType type = 1 [default = CONTAINER_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageType_IsValid(value)) {
            set_type(static_cast< ::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // required .ContainerProtocol.Request.Operation op = 2;
      case 2: {
        if (tag == 16) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContainerProtocol::Request_Operation_IsValid(value)) {
            set_op(static_cast< ::ContainerProtocol::Request_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instance_id;
        break;
      }

      // optional string instance_id = 3;
      case 3: {
        if (tag == 26) {
         parse_instance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instance_id().data(), this->instance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instance_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_component_id;
        break;
      }

      // optional string component_id = 4;
      case 4: {
        if (tag == 34) {
         parse_component_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->component_id().data(), this->component_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "component_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // optional string path = 5;
      case 5: {
        if (tag == 42) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_xml;
        break;
      }

      // optional string xml = 6;
      case 6: {
        if (tag == 50) {
         parse_xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xml().data(), this->xml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xml");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_operation;
        break;
      }

      // optional string operation = 7;
      case 7: {
        if (tag == 58) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "operation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContainerProtocol.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContainerProtocol.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContainerProtocol.Request)
  // required .MessageType type = 1 [default = CONTAINER_REQ];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .ContainerProtocol.Request.Operation op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op(), output);
  }

  // optional string instance_id = 3;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instance_id(), output);
  }

  // optional string component_id = 4;
  if (has_component_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->component_id().data(), this->component_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "component_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->component_id(), output);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  // optional string xml = 6;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->xml(), output);
  }

  // optional string operation = 7;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContainerProtocol.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContainerProtocol.Request)
  // required .MessageType type = 1 [default = CONTAINER_REQ];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .ContainerProtocol.Request.Operation op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op(), target);
  }

  // optional string instance_id = 3;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instance_id(), target);
  }

  // optional string component_id = 4;
  if (has_component_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->component_id().data(), this->component_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "component_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->component_id(), target);
  }

  // optional string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  // optional string xml = 6;
  if (has_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml().data(), this->xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->xml(), target);
  }

  // optional string operation = 7;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContainerProtocol.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageType type = 1 [default = CONTAINER_REQ];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .ContainerProtocol.Request.Operation op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional string instance_id = 3;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instance_id());
    }

    // optional string component_id = 4;
    if (has_component_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->component_id());
    }

    // optional string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string xml = 6;
    if (has_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xml());
    }

    // optional string operation = 7;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_component_id()) {
      set_component_id(from.component_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_xml()) {
      set_xml(from.xml());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(op_, other->op_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(component_id_, other->component_id_);
    std::swap(path_, other->path_);
    std::swap(xml_, other->xml_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reply::kTypeFieldNumber;
const int Reply::kStatusFieldNumber;
const int Reply::kRemainingFieldNumber;
const int Reply::kOperationResultFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContainerProtocol.Reply)
}

void Reply::InitAsDefaultInstance() {
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContainerProtocol.Reply)
}

void Reply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 4;
  status_ = 0;
  remaining_ = 0;
  operation_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:ContainerProtocol.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  if (operation_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operation_result_;
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_container_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 4;
    status_ = 0;
    remaining_ = 0;
    if (has_operation_result()) {
      if (operation_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operation_result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContainerProtocol.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageType type = 1 [default = CONTAINER_REPLY];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageType_IsValid(value)) {
            set_type(static_cast< ::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remaining;
        break;
      }

      // optional int32 remaining = 3;
      case 3: {
        if (tag == 24) {
         parse_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_)));
          set_has_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_operation_result;
        break;
      }

      // optional string operation_result = 4;
      case 4: {
        if (tag == 34) {
         parse_operation_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operation_result().data(), this->operation_result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "operation_result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContainerProtocol.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContainerProtocol.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContainerProtocol.Reply)
  // required .MessageType type = 1 [default = CONTAINER_REPLY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 remaining = 3;
  if (has_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remaining(), output);
  }

  // optional string operation_result = 4;
  if (has_operation_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation_result().data(), this->operation_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operation_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->operation_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContainerProtocol.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContainerProtocol.Reply)
  // required .MessageType type = 1 [default = CONTAINER_REPLY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 remaining = 3;
  if (has_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remaining(), target);
  }

  // optional string operation_result = 4;
  if (has_operation_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation_result().data(), this->operation_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operation_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->operation_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContainerProtocol.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageType type = 1 [default = CONTAINER_REPLY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 remaining = 3;
    if (has_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaining());
    }

    // optional string operation_result = 4;
    if (has_operation_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_remaining()) {
      set_remaining(from.remaining());
    }
    if (from.has_operation_result()) {
      set_operation_result(from.operation_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(remaining_, other->remaining_);
    std::swap(operation_result_, other->operation_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ContainerProtocol

// @@protoc_insertion_point(global_scope)
