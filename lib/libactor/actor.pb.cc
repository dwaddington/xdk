// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "actor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ActorProtocol {

namespace {

const ::google::protobuf::Descriptor* Unknown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unknown_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorRequest_Operation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActorReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_actor_2eproto() {
  protobuf_AddDesc_actor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "actor.proto");
  GOOGLE_CHECK(file != NULL);
  Unknown_descriptor_ = file->message_type(0);
  static const int Unknown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unknown, type_),
  };
  Unknown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unknown_descriptor_,
      Unknown::default_instance_,
      Unknown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unknown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unknown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unknown));
  ActorRequest_descriptor_ = file->message_type(1);
  static const int ActorRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRequest, base_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRequest, request_id_),
  };
  ActorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorRequest_descriptor_,
      ActorRequest::default_instance_,
      ActorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorRequest));
  ActorRequest_Operation_descriptor_ = ActorRequest_descriptor_->enum_type(0);
  ActorReply_descriptor_ = file->message_type(2);
  static const int ActorReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorReply, session_endpoint_),
  };
  ActorReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorReply_descriptor_,
      ActorReply::default_instance_,
      ActorReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_actor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unknown_descriptor_, &Unknown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorRequest_descriptor_, &ActorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorReply_descriptor_, &ActorReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_actor_2eproto() {
  delete Unknown::default_instance_;
  delete Unknown_reflection_;
  delete ActorRequest::default_instance_;
  delete ActorRequest_reflection_;
  delete ActorReply::default_instance_;
  delete ActorReply_reflection_;
}

void protobuf_AddDesc_actor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_msgtypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013actor.proto\022\rActorProtocol\032\016msgtypes.p"
    "roto\"%\n\007Unknown\022\032\n\004type\030\001 \002(\0162\014.MessageT"
    "ype\"\342\001\n\014ActorRequest\022%\n\004type\030\001 \002(\0162\014.Mes"
    "sageType:\tACTOR_REQ\0228\n\toperation\030\002 \002(\0162%"
    ".ActorProtocol.ActorRequest.Operation\022\025\n"
    "\rbase_endpoint\030\003 \001(\t\022\022\n\nrequest_id\030\004 \001(\r"
    "\"F\n\tOperation\022\022\n\016CREATE_SESSION\020\001\022\021\n\rCLO"
    "SE_SESSION\020\002\022\022\n\016ACTOR_SHUTDOWN\020\003\"O\n\nActo"
    "rReply\022\'\n\004type\030\001 \002(\0162\014.MessageType:\013ACTO"
    "R_REPLY\022\030\n\020session_endpoint\030\002 \001(\tB\002H\001", 397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "actor.proto", &protobuf_RegisterTypes);
  Unknown::default_instance_ = new Unknown();
  ActorRequest::default_instance_ = new ActorRequest();
  ActorReply::default_instance_ = new ActorReply();
  Unknown::default_instance_->InitAsDefaultInstance();
  ActorRequest::default_instance_->InitAsDefaultInstance();
  ActorReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_actor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_actor_2eproto {
  StaticDescriptorInitializer_actor_2eproto() {
    protobuf_AddDesc_actor_2eproto();
  }
} static_descriptor_initializer_actor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Unknown::kTypeFieldNumber;
#endif  // !_MSC_VER

Unknown::Unknown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActorProtocol.Unknown)
}

void Unknown::InitAsDefaultInstance() {
}

Unknown::Unknown(const Unknown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActorProtocol.Unknown)
}

void Unknown::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unknown::~Unknown() {
  // @@protoc_insertion_point(destructor:ActorProtocol.Unknown)
  SharedDtor();
}

void Unknown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Unknown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unknown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unknown_descriptor_;
}

const Unknown& Unknown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actor_2eproto();
  return *default_instance_;
}

Unknown* Unknown::default_instance_ = NULL;

Unknown* Unknown::New() const {
  return new Unknown;
}

void Unknown::Clear() {
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unknown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActorProtocol.Unknown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageType_IsValid(value)) {
            set_type(static_cast< ::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActorProtocol.Unknown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActorProtocol.Unknown)
  return false;
#undef DO_
}

void Unknown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActorProtocol.Unknown)
  // required .MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActorProtocol.Unknown)
}

::google::protobuf::uint8* Unknown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActorProtocol.Unknown)
  // required .MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActorProtocol.Unknown)
  return target;
}

int Unknown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unknown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unknown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unknown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unknown::MergeFrom(const Unknown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unknown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unknown::CopyFrom(const Unknown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unknown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Unknown::Swap(Unknown* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unknown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unknown_descriptor_;
  metadata.reflection = Unknown_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ActorRequest_Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorRequest_Operation_descriptor_;
}
bool ActorRequest_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ActorRequest_Operation ActorRequest::CREATE_SESSION;
const ActorRequest_Operation ActorRequest::CLOSE_SESSION;
const ActorRequest_Operation ActorRequest::ACTOR_SHUTDOWN;
const ActorRequest_Operation ActorRequest::Operation_MIN;
const ActorRequest_Operation ActorRequest::Operation_MAX;
const int ActorRequest::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ActorRequest::kTypeFieldNumber;
const int ActorRequest::kOperationFieldNumber;
const int ActorRequest::kBaseEndpointFieldNumber;
const int ActorRequest::kRequestIdFieldNumber;
#endif  // !_MSC_VER

ActorRequest::ActorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActorProtocol.ActorRequest)
}

void ActorRequest::InitAsDefaultInstance() {
}

ActorRequest::ActorRequest(const ActorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActorProtocol.ActorRequest)
}

void ActorRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  operation_ = 1;
  base_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorRequest::~ActorRequest() {
  // @@protoc_insertion_point(destructor:ActorProtocol.ActorRequest)
  SharedDtor();
}

void ActorRequest::SharedDtor() {
  if (base_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_endpoint_;
  }
  if (this != default_instance_) {
  }
}

void ActorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorRequest_descriptor_;
}

const ActorRequest& ActorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actor_2eproto();
  return *default_instance_;
}

ActorRequest* ActorRequest::default_instance_ = NULL;

ActorRequest* ActorRequest::New() const {
  return new ActorRequest;
}

void ActorRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    operation_ = 1;
    if (has_base_endpoint()) {
      if (base_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        base_endpoint_->clear();
      }
    }
    request_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActorProtocol.ActorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageType type = 1 [default = ACTOR_REQ];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageType_IsValid(value)) {
            set_type(static_cast< ::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required .ActorProtocol.ActorRequest.Operation operation = 2;
      case 2: {
        if (tag == 16) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ActorProtocol::ActorRequest_Operation_IsValid(value)) {
            set_operation(static_cast< ::ActorProtocol::ActorRequest_Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base_endpoint;
        break;
      }

      // optional string base_endpoint = 3;
      case 3: {
        if (tag == 26) {
         parse_base_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->base_endpoint().data(), this->base_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "base_endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_request_id;
        break;
      }

      // optional uint32 request_id = 4;
      case 4: {
        if (tag == 32) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActorProtocol.ActorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActorProtocol.ActorRequest)
  return false;
#undef DO_
}

void ActorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActorProtocol.ActorRequest)
  // required .MessageType type = 1 [default = ACTOR_REQ];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .ActorProtocol.ActorRequest.Operation operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // optional string base_endpoint = 3;
  if (has_base_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_endpoint().data(), this->base_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "base_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->base_endpoint(), output);
  }

  // optional uint32 request_id = 4;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->request_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActorProtocol.ActorRequest)
}

::google::protobuf::uint8* ActorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActorProtocol.ActorRequest)
  // required .MessageType type = 1 [default = ACTOR_REQ];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .ActorProtocol.ActorRequest.Operation operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }

  // optional string base_endpoint = 3;
  if (has_base_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->base_endpoint().data(), this->base_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "base_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->base_endpoint(), target);
  }

  // optional uint32 request_id = 4;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->request_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActorProtocol.ActorRequest)
  return target;
}

int ActorRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageType type = 1 [default = ACTOR_REQ];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .ActorProtocol.ActorRequest.Operation operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // optional string base_endpoint = 3;
    if (has_base_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_endpoint());
    }

    // optional uint32 request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorRequest::MergeFrom(const ActorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_base_endpoint()) {
      set_base_endpoint(from.base_endpoint());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorRequest::CopyFrom(const ActorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActorRequest::Swap(ActorRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(operation_, other->operation_);
    std::swap(base_endpoint_, other->base_endpoint_);
    std::swap(request_id_, other->request_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorRequest_descriptor_;
  metadata.reflection = ActorRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorReply::kTypeFieldNumber;
const int ActorReply::kSessionEndpointFieldNumber;
#endif  // !_MSC_VER

ActorReply::ActorReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActorProtocol.ActorReply)
}

void ActorReply::InitAsDefaultInstance() {
}

ActorReply::ActorReply(const ActorReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActorProtocol.ActorReply)
}

void ActorReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 2;
  session_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorReply::~ActorReply() {
  // @@protoc_insertion_point(destructor:ActorProtocol.ActorReply)
  SharedDtor();
}

void ActorReply::SharedDtor() {
  if (session_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_endpoint_;
  }
  if (this != default_instance_) {
  }
}

void ActorReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorReply_descriptor_;
}

const ActorReply& ActorReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actor_2eproto();
  return *default_instance_;
}

ActorReply* ActorReply::default_instance_ = NULL;

ActorReply* ActorReply::New() const {
  return new ActorReply;
}

void ActorReply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 2;
    if (has_session_endpoint()) {
      if (session_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_endpoint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActorProtocol.ActorReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageType type = 1 [default = ACTOR_REPLY];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MessageType_IsValid(value)) {
            set_type(static_cast< ::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_endpoint;
        break;
      }

      // optional string session_endpoint = 2;
      case 2: {
        if (tag == 18) {
         parse_session_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_endpoint().data(), this->session_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActorProtocol.ActorReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActorProtocol.ActorReply)
  return false;
#undef DO_
}

void ActorReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActorProtocol.ActorReply)
  // required .MessageType type = 1 [default = ACTOR_REPLY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string session_endpoint = 2;
  if (has_session_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_endpoint().data(), this->session_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_endpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActorProtocol.ActorReply)
}

::google::protobuf::uint8* ActorReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActorProtocol.ActorReply)
  // required .MessageType type = 1 [default = ACTOR_REPLY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string session_endpoint = 2;
  if (has_session_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_endpoint().data(), this->session_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_endpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActorProtocol.ActorReply)
  return target;
}

int ActorReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageType type = 1 [default = ACTOR_REPLY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string session_endpoint = 2;
    if (has_session_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_endpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorReply::MergeFrom(const ActorReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_session_endpoint()) {
      set_session_endpoint(from.session_endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorReply::CopyFrom(const ActorReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActorReply::Swap(ActorReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(session_endpoint_, other->session_endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorReply_descriptor_;
  metadata.reflection = ActorReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActorProtocol

// @@protoc_insertion_point(global_scope)
